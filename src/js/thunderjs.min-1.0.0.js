if (typeof jQuery === "undefined") { throw new Error("thunderJs requires jQuery") } if (typeof jQuery.ui === "undefined") { throw new Error("thunderJs requires jQuery.ui") } (function (e, t) { if (!e.thunder) { e.thunder = {} } e.thunder.statusCode = { 400: "Bad request", 401: "Unauthorized", 403: "Forbidden", 404: "Page not found", 405: "Method not allowed", 407: "Proxy authentication required", 408: "Request timeout", 500: "Internal server error", 501: "Not implemented", 502: "Bad gateway", 503: "Service unavailable" }; e.thunder.activeModal = e({}); e.thunder.utility = function () { return { queryString: function (e) { return this.querStringFormUrl(t.location.search, e) }, querStringFormUrl: function (e, t) { t = t.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"); var n = new RegExp("[\\?&]" + t + "=([^&#]*)"), r = n.exec(e); return r == null ? "" : decodeURIComponent(r[1].replace(/\+/g, " ")) }, statusCode: function (t) { var n = e.extend(true, {}, { message: { plugin: "message", selector: null, showClose: false } }, t); var r = function (t) { var r = e.thunder.statusCode[t]; if (n.message.plugin == "message") { if (e(n.message.selector).length > 0) { e.thunder.message(n.message.selector, r, e.extend(true, { type: "danger" }, n.message)) } else { e.thunder.alert(r, { type: "danger" }) } } else { e.thunder.alert(r, { type: "danger" }) } }; return { 400: function () { r(400) }, 401: function () { r(401) }, 403: function () { r(403) }, 404: function () { r(404) }, 405: function () { r(405) }, 407: function () { r(407) }, 408: function () { r(408) }, 500: function () { r(500) }, 501: function () { r(501) }, 502: function () { r(502) }, 503: function () { r(503) } } } } }; e.thunder.closeModal = function () { if (e.thunder.activeModal !== "undefined" && e.thunder.activeModal.size() > 0) { e.thunder.activeModal.dialog("close") } }; e.thunder.appendMessage = function (t, n) { return e(t).each(function () { var t = function (t) { var n = []; if (e.isArray(t) && t.length > 0) { if (t[0].key !== undefined && t[0].value !== undefined) { e.each(t, function () { if (e.isArray(this.value)) { e.each(this.value, function () { n.push(this) }) } else { n.push(this.value) } }) } else { e.each(t, function () { n.push(this) }) } } else { if (e.isPlainObject(t) && t.key !== undefined && t.value !== undefined) { if (e.isArray(t.value)) { e.each(t.value, function () { n.push(this) }) } else { n.push(t.value) } } else { n.push(t) } } return n }; var r = t(n); if (r.length > 1) { var i = e("<ul></ul>"); e.each(r, function () { i.append(e("<li></li>").html(this)) }); e(this).append(i) } else { e(this).append(r[0]) } }) }; e.thunder.disableElement = function (t) { return e(t).each(function () { e(this).addClass("disabled").attr("disabled", "disabled") }) }; e.thunder.enableElement = function (t) { return e(t).each(function () { e(this).removeClass("disabled").removeAttr("disabled") }) }; e.thunder.alert = function (n, r) { var i = e.extend(true, { onOk: function () { } }, e.thunder.alert.defaultOptions, r); var s = e("." + i.className); var o = e('<div class="modal-dialog"></div>'); var u = e('<div class="modal-content"></div>'); var a = e('<div class="modal-header"></div>'); var f = e('<div class="modal-body"></div>'); var l = e('<div class="modal-footer"></div>'); var c = e('<button type="button"></button>'); if (s.size() == 0) { s = e("<div></div>").addClass(i.className); e("body").append(s) } if (i.type !== "none") { s.removeClass(i.className + "-none").removeClass(i.className + "-success").removeClass(i.className + "-info").removeClass(i.className + "-warning").removeClass(i.className + "-danger"); s.addClass(i.className + "-" + i.type) } if (e.trim(i.title) != "") { u.append(a.append(e('<h4 class="modal-title"></h4>').html(i.title))) } c.addClass(i.button.className).html(i.button.label); c.on("click", function () { if (e.isFunction(i.onOk)) { i.onOk.call(s) } s.modal("hide") }); e.thunder.appendMessage(f, n); u.append(f).append(l.append(c)); o.css("width", e(t).width() > i.width ? i.width : e(t).width() - 20).append(u); s.empty().addClass("modal").addClass(i.effect).append(o); s.on("shown.bs.modal", function () { c.focus() }); s.modal("show") }; e.thunder.alert.defaultOptions = { title: "Alert", className: "thunder-alert", effect: "fade", type: "none", button: { label: "OK", className: "btn btn-default btn-sm" }, width: 600 }; e.thunder.confirm = function (n, r) { var i = e.extend(true, { onYes: function () { }, onNo: function () { } }, e.thunder.confirm.defaultOptions, r); var s = e("." + i.className); var o = e('<div class="modal-dialog"></div>'); var u = e('<div class="modal-content"></div>'); var a = e('<div class="modal-header"></div>'); var f = e('<div class="modal-body"></div>').html(n); var l = e('<div class="modal-footer"></div>'); var c = e('<button type="button"></button>'); var h = e('<button type="button"></button>'); if (s.size() == 0) { s = e("<div></div>").addClass(i.className); e("body").append(s) } if (e.trim(i.title) != "") { u.append(a.append(e('<h4 class="modal-title"></h4>').html(i.title))) } c.addClass(i.button.yes.className).html(i.button.yes.label).on("click", function () { if (e.isFunction(i.onYes)) { i.onYes.call(s) } s.modal("hide") }); h.addClass(i.button.no.className).html(i.button.no.label).on("click", function () { if (e.isFunction(i.onNo)) { i.onNo.call(s) } s.modal("hide") }); u.append(f).append(l.append(c).append(h)); o.css("width", e(t).width() > i.width ? i.width : e(t).width() - 20).append(u); s.empty().addClass("modal").addClass(i.effect).append(o); s.modal("show") }; e.thunder.confirm.defaultOptions = { title: "Confirm", className: "thunder-confirm", effect: "fade", button: { yes: { label: "Yes", className: "btn btn-success btn-sm" }, no: { label: "No", className: "btn btn-danger btn-sm" } }, width: 600 }; e.thunder.modal = function (n, r) { var i = e.extend(true, { data: {}, open: function () { }, beforeClose: function () { }, close: function () { } }, e.thunder.modal.defaultOptions, r); if (n === "undefined" || e.trim(n) === "") { throw new Error("Unknown url") } var s = function () { var t = function () { return n.indexOf("?") == -1 ? "?" : "&" }; if (jQuery.isPlainObject(i.data) && !jQuery.isEmptyObject(i.data)) { n += t() + e.param(i.data) } else { if (typeof i.data == "string") { n += t() + i.data } } if (i.forceReload) { n += t() + "forceReload=" + parseInt(Math.random() * 9999999999) } n += t() + "forceFocusOnLoadInModal=" + i.forceFocusOnLoadInModal; return n }; var o = function () { var t = e("<div></div>").addClass("thunder-modal-loading"); for (var n = 1; n <= 8; n++) { t.append(e("<div></div>").addClass("thunder-modal-loading-item").addClass("thunder-modal-loading-item-" + n)) } return t }; var u = e("." + i.className + "-iframe"); var a = e("<iframe></iframe>").attr("frameborder", i.iframe.frameBorder).attr("marginheight", i.iframe.marginHeight).attr("marginwidth", i.iframe.marginWidth).attr("scrolling", i.iframe.scrolling).attr("src", s()).hide(); if (u.length == 0) { u = e("<div></div>").addClass(i.className + "-iframe"); e("body").append(u) } e.thunder.activeModal = u; u.empty().show().dialog({ autoOpen: true, modal: true, resizable: false, draggable: false, closeOnEscape: i.closeOnEscape, dialogClass: i.className, width: e(t).width() > i.width ? i.width : e(t).width() - 20, height: i.height, open: function () { var n = o(); u.prev(".ui-dialog-titlebar").remove(); a.attr("width", u.width()).attr("height", u.height()); u.append(n).append(a); a.load(function () { a.show(); n.remove(); t.setTimeout(function () { var t = a.contents(); e("button.close", t).on("click", function () { u.dialog("close") }); if (e.isFunction(i.open)) { i.open.call(t) } }, 100) }) }, beforeClose: function () { u.empty(); if (e.isFunction(i.beforeClose)) { i.beforeClose.call(a.contents()) } }, close: function () { e.thunder.activeModal = e({}); u.remove(); if (e.isFunction(i.close)) { t.setTimeout(function () { i.close.call() }, 0) } } }) }; e.thunder.modal.defaultOptions = { className: "thunder-modal", iframe: { frameBorder: 0, marginHeight: 0, marginWidth: 0, scrolling: "auto" }, width: 600, height: 400, forceReload: true, forceFocusOnLoadInModal: true, closeOnEscape: false }; e.thunder.openModal = function (t, n) { return e(t).each(function () { var t = e(this); var r = function (e) { var t = "about:blank"; if (e.is("a")) { if (e.attr("href") !== "undefined" && e.attr("href") !== "#" && e.attr("href") !== "") { t = e.attr("href") } } if (t === "about:blank" && e.data("url") !== "undefined") { t = e.data("url") } return t }; t.on("click", function (t) { t.preventDefault(); e.thunder.modal(r(e(this)), e.extend(true, { width: e(this).data("width"), height: e(this).data("height") }, n)) }); return t }) }; e.thunder.message = function (n, r, i) { var s = e.extend(true, { show: function () { } }, e.thunder.message.defaultOptions, i); return e(n).each(function () { var n = e(this).addClass("alert").addClass("alert-" + s.type).empty().hide().css(s.css); var i = function () { if (s.removeAfterClose) { n.remove() } else { n.hide() } }; if (s.showClose) { var o = e("<button></button>").attr("type", "button").addClass("close").on("click", i).html("&times;"); n.append(o) } e.thunder.appendMessage(n, r); n.show(s.animate.duration, s.animate.easing, function () { if (e.isFunction(s.show)) { s.show.call(n) } }); if (s.autoClose.enable) { t.setTimeout(i, s.autoClose.timer) } return n }) }; e.thunder.message.defaultOptions = { showClose: true, type: "success", removeAfterClose: false, autoClose: { enable: false, timer: 5e3 }, css: { marginTop: 0 }, animate: { duration: 400, easing: "linear" } }; e.thunder.ajaxForm = function (n, r) { var i = e.extend(true, { message: { selector: null }, async: true, autoResolveResult: true, before: function () { }, success: function () { }, complete: function () { }, validate: function () { return true } }, e.thunder.ajaxForm.defaultOptions, r); return e(n).each(function () { var n = e(this).addClass(i.className); var r = e(i.message.selector); var s = e(i.loading); if (n.attr("action") === "undefined" || e.trim(n.attr("action")) === "") { throw new Error("Action attribute is empty in form") } if (r.length == 0 && !n.prev().is("." + i.className + "-message")) { n.before(e("<div></div>").addClass(i.className + "-message")); r = n.prev() } if (s.length == 0 && e("." + i.className + "-loading", n).length == 0) { s = e("<div></div>").addClass(i.className + "-loading"); for (var o = 1; o <= 8; o++) { s.append(e("<div></div>").addClass(i.className + "-loading-item").addClass(i.className + "-loading-item-" + o)) } n.prepend(s); s = e("." + i.className + "-loading", n) } var u = function (t, n) { var s = e.extend({ type: 3 }, n); var o = function () { if (s.type === 0) { return "success" } else if (s.type === 1) { return "info" } else if (s.type === 2) { return "warning" } else if (s.type === 3) { return "danger" } else { return "" } }; if (i.message.plugin == "message") { e.thunder.message(r, t, e.extend(true, { type: o(), show: function () { if (e.isFunction(i.message.show)) { i.message.show.call() } } }, i.message)) } else { e.thunder.alert(t, { type: o() }) } }; var a = function (t, n) { var r = e(t); var s = e("input,select,textarea", r); if (i.ignore !== "undefined" && i.ignore !== "") { s = e("input,select,textarea", r).filter(i.ignore) } var o = s.serializeArray(); if (e.isArray(n)) { e.each(n, function () { e.each(this, function (e, t) { o.push({ name: e, value: t }) }) }) } else if (e.isPlainObject(n) && !e.isEmptyObject(n)) { e.each(n, function (e, t) { o.push({ name: e, value: t }) }) } return e.param(o) }; n.on("submit", function (o) { var f = n; var l = {}; o.preventDefault(); s.hide(); r.hide(); if (e.isFunction(i.before)) { l = i.before.call(f) } var c = a(f, l); if (e.isFunction(i.validate) && !i.validate.call(f, c)) { return } var h = e.thunder.utility().statusCode(e.extend(true, { message: { selector: r } }, i.statusCode)); e.ajax({ statusCode: h, async: i.async, url: f.attr("action"), type: f.attr("method"), data: c, headers: { "Url-Parent": t.location.pathname }, beforeSend: function () { s.show(); e.thunder.disableElement(e("input,select,textarea,button", f)); e("input,select,textarea", f).removeClass(i.className + "-error") }, complete: function () { e.thunder.enableElement(e("input,select,textarea,button", f)); s.hide(); if (e.isFunction(i.complete)) { i.complete.call(f) } }, success: function (n) { t.setTimeout(function () { if (i.autoResolveResult) { if (e.isPlainObject(n) && !e.isEmptyObject(n) && n.type !== "undefined") { if (n.type === 0) { if (e.isFunction(i.success)) { i.success.call(f, n) } } else { var t = null; e.each(n.messages, function () { if (this.key !== undefined) { var n = e("[name='" + this.key + "'],#" + this.key, f); if (t == null) { t = n } n.addClass(i.className + "-error") } }); u(n.messages, { type: n.type }) } } else { i.success.call(f, n) } } else { i.success.call(f, n) } }, 0) } }) }); return n }) }; e.thunder.ajaxForm.defaultOptions = { className: "thunder-ajax-form", ignore: "", loading: null, statusCode: { message: { plugin: "message", showClose: false } }, message: { plugin: "message", showClose: true } }; e.thunder.grid = function (n, r) { var i = e.extend(true, { message: { selector: null }, fieldPrefix: "", async: true, load: true, currentPage: 0, form: null, before: function () { }, success: function () { }, complete: function () { }, validate: function () { return true } }, e.thunder.grid.defaultOptions, r); var s = function (t, n) { var r = e.extend({ type: 3 }, n); var s = function () { if (r.type === 0) { return "success" } else if (r.type === 1) { return "info" } else if (r.type === 2) { return "warning" } else if (r.type === 3) { return "danger" } else { return "" } }; if (i.message.plugin == "message") { e.thunder.message(this, t, e.extend(true, { type: s(), show: function () { if (e.isFunction(i.message.show)) { i.message.show.call() } } }, i.message)) } else { e.thunder.alert(t, { type: s() }) } }; var o = function (t) { var n = e(this); var r = e("input,select,textarea", n); if (i.ignore !== "undefined" && i.ignore !== "") { r = e("input,select,textarea", n).filter(i.ignore) } var s = r.serializeArray(); if (e.isArray(t)) { e.each(t, function () { e.each(this, function (e, t) { s.push({ name: e, value: t }) }) }) } else if (e.isPlainObject(t) && !e.isEmptyObject(t)) { e.each(t, function (e, t) { s.push({ name: e, value: t }) }) } return e.param(s) }; var u = function (e) { if (i.fieldPrefix !== null && i.fieldPrefix !== "") { return i.fieldPrefix + "." + e } return e }; var a = function (t) { e("." + i.className + "-current-page", this).val(t) }; var f = function () { var n = e(this); var r = n.data("form"); var u = n.data("loading"); var a = n.data("message"); var f = n.data("content"); var l = {}; u.hide(); a.hide(); if (e.isFunction(i.before)) { l = i.before.call(r) } var c = o.call(r, l); if (e.isFunction(i.validate) && !i.validate.call(r, c)) { return } var h = e.thunder.utility().statusCode(e.extend(true, { message: { selector: a } }, i.statusCode)); e.ajax({ statusCode: h, async: i.async, url: r.attr("action"), type: r.attr("method"), data: c, headers: { "Url-Parent": t.location.pathname }, beforeSend: function () { u.show(); e.thunder.disableElement(e("input,select,textarea,button", r)); e.thunder.disableElement(e("a,input,select,textarea,button", n)); e("input,select,textarea", r).removeClass(i.className + "-error") }, complete: function () { e.thunder.enableElement(e("input,select,textarea,button", r)); e.thunder.enableElement(e("a,input,select,textarea,button", n)); u.hide(); if (e.isFunction(i.complete)) { i.complete.call(r) } }, success: function (n) { t.setTimeout(function () { if (e.isPlainObject(n) && !e.isEmptyObject(n) && n.type !== "undefined") { if (n.type === 0) { if (e.isFunction(i.success)) { i.success.call(r, n) } } else { var t = null; e.each(n.messages, function () { if (this.key !== undefined) { var n = e("[name='" + this.key + "'],#" + this.key, r); if (t == null) { t = n } n.addClass(i.className + "-error") } }); s(n.messages, { type: n.type }) } } else { f.html(n); i.success.call(r, n) } }, 0) } }) }; if (r === "reload") { e(n).trigger("reload"); return e(n) } return e(n).each(function () { var t = e(this); var n = e(i.message.selector); var r = e(i.loading); var s = e(i.form); var o = e("<div></div>"); t.addClass(i.className).css(i.css); o.addClass(i.className + "-content").css(i.content.css); if (t.data("url") === undefined) { throw new Error("Data url attribute is empty in grid") } if (n.length == 0 && !t.prev().is("." + i.className + "-message")) { t.before(e("<div></div>").addClass(i.className + "-message")); n = t.prev() } if (s.length == 0 && e("." + i.className + "-form", t).length == 0) { t.prepend(e("<form></form>").addClass(i.className + "-form")); s = e("." + i.className + "-form", t) } if (r.length == 0 && e("." + i.className + "-loading", t).length == 0) { r = e("<div></div>").addClass(i.className + "-loading"); for (var l = 1; l <= 8; l++) { r.append(e("<div></div>").addClass(i.className + "-loading-item").addClass(i.className + "-loading-item-" + l)) } t.prepend(r); r = e("." + i.className + "-loading", t) } if (e("." + i.className + "-current-page", s).length == 0) { s.prepend(e("<input/>").attr("type", "hidden").attr("name", u("CurrentPage")).val(i.currentPage).addClass(i.className + "-current-page")) } if (e("." + i.className + "-page-size", s).length == 0) { s.prepend(e("<input/>").attr("type", "hidden").attr("name", u("PageSize")).val(i.pageSize).addClass(i.className + "-page-size")) } t.append(o); s.attr("action", t.data("url")).attr("method", i.httpMethod).on("submit", function (e) { e.preventDefault(); a.call(this, 0); f.call(t) }); t.bind("reload", function () { s.submit() }); t.data("loading", r).data("message", n).data("content", o).data("form", s); t.on("click", "ul.pagination a", function (n) { var r = e(this); n.preventDefault(); if (!r.is(".disabled") && !r.parents("li:first").is(".disabled")) { a.call(s, r.data("page")); f.call(t) } }); if (i.load) { f.call(t) } return t }) }; e.thunder.grid.defaultOptions = { className: "thunder-grid", ignore: "", loading: null, httpMethod: "POST", statusCode: { message: { plugin: "message", showClose: false } }, message: { plugin: "message", showClose: true }, pageSize: 20, css: {}, content: { css: {} } }; e.thunder.openModal("[data-thunder-plugin=modal]"); if (e("[data-window=modal]").size() > 0) { if (e.thunder.utility().queryString("forceFocusOnLoadInModal")) { t.setTimeout(function () { e("input:visible:not(input[type='hidden'],:disabled),select:visible:not(:disabled),textarea:visible:not(:disabled)").focus() }, 500) } } })(window.jQuery, window)